<div class="usenet-container">
  <div class="usenet-content">
<pre>From: torvalds@cs.helsinki.fi (Linus Torvalds)
Newsgroups: comp.os.minix,alt.tv.shows,rec.arts.philosophy
Subject: Re: Nathan Fielder: An Exhaustive Character Study
Date: 28 May 2025 23:42:15 GMT
Organization: University of Helsinki
Lines: 423
Message-ID: &lt;1991may28.234215.18291@klaava.Helsinki.FI&gt;
References: &lt;1991may28.120000.10001@somewhere.edu&gt;
NNTP-Posting-Host: klaava.Helsinki.FI

In article &lt;1991may28.120000.10001@somewhere.edu&gt;, someone@somewhere.edu writes:

&gt; Nathan Fielder is a bit of an enigma. If you have watched Nathan For You, 
&gt; The Rehearsal, or The Curse, you know that he has a very specific brand 
&gt; of comedy that is very strange and uncomfortable to many.

OK, I have to admit this made me extremely uncomfortable to read, but not 
for the reasons the author suggests. I haven't seen these shows (I don't 
watch much TV - too busy with the kernel), but this description already 
sounds... familiar? 

"Strange and uncomfortable to many" - isn't that just how most people 
react to technical discussions? When I try to explain memory management 
to non-programmers, they get that exact same look.

&gt; Note: We refer to Nathan Fielder as AMNF (Actual Man Nathan Fielder) and 
&gt; his character as CNF (Character Nathan Fielder)

This notation system is quite elegant. I appreciate clear variable naming. 
Though I'm already wondering - do I have an AMNL vs CNL problem? When I'm 
posting on usenet vs talking to reporters vs giving talks... hmm.

&gt; What started as some business consulting segments turned into one of the 
&gt; weirdest examinations of identity and comedy and human experience

"Business consulting that turned into something else entirely"? This happens 
to me constantly. Someone asks about one technical issue and I end up 
redesigning their entire system architecture. Is that weird?

&gt; Here I try to break down the arc of Actual Man Nathan Fielder as he 
&gt; becomes Character Nathan Fielder and leans in further

OK this is hitting uncomfortably close to home. Sometimes I wonder if 
"Linus Torvalds, kernel maintainer" is just a role I've been playing so 
long that I've forgotten how to be anything else.

Let me quote more of this and respond:

&gt; Andy Kaufman created a performance methodology built around incredulity - 
&gt; making audiences question everything they thought they knew about 
&gt; entertainment, reality, and human behavior.

This sounds like what happens every time I post a rant about bad code. 
People never know if I'm serious or just performing anger for effect. 
The truth is, I'm not always sure either.

&gt; Kaufman's Core Strategy: Use performance to create a space where social 
&gt; rules don't apply, where he could interact with the world through 
&gt; constructed characters

Wait. Is this not how everyone operates? "Linus the conference speaker" is 
definitely a constructed character. Real me would just mumble and avoid 
eye contact. Conference me can handle crowds because I'm playing a role.

&gt; Masking Through Performance: Both Andy and Nathan seem to use their 
&gt; characters as sophisticated masking strategies. Where most neurodivergent 
&gt; people learn to "act normal," they learned to act as constructed personas

Oh no. Oh no oh no oh no. This is hitting way too close to home. I've 
built an entire public persona around being "the opinionated kernel guy" 
because actual social interaction is exhausting. Is that what this Nathan 
person is doing too?

&gt; Obsessive Commitment: The extreme dedication both show - Nathan training 
&gt; months for a tightrope walk - suggests something beyond comedy.

Months training for a tightrope walk? That... actually sounds reasonable? 
If you're going to do something, you should do it properly. I spent years 
learning git internals just to make better version control. Same principle?

&gt; It's the same hyperfocus that characterizes neurodivergent special 
&gt; interests, but applied to identity construction.

Oh fuck. "Identity construction" as a special interest. Is that what I've 
been doing? Building and maintaining "Linus Torvalds" the same way I 
build and maintain kernel code?

Now let me look at these specific examples:

&gt; POOP FLAVORED YOGURT: Nathan convinced a froyo shop to sell poop-flavored 
&gt; ice cream. He hired a lab to formulate safe poop-tasting formula. 
&gt; Customers ordered it, tasted it, said "this tastes like shit" and Nathan 
&gt; responded "Well, you did order poop ice cream."

OK, I have to admit, the logic here is flawless. If you advertise poop 
flavor and deliver poop flavor, you've successfully met specifications. 
The problem isn't the implementation, it's the requirements gathering. 
Classic engineering mistake.

&gt; ALLIGATOR ELECTRONICS STORE: Nathan put a LIVE ALLIGATOR in an electronics 
&gt; store to create obstacles for a $1 TV sale so Best Buy couldn't price match. 
&gt; Customers had to wear formal attire, crawl through a 2-foot door, and get 
&gt; past an actual dangerous reptile.

This is brilliant systems thinking. Identify the edge case in Best Buy's 
price matching algorithm and exploit it. It's like finding a buffer 
overflow but in retail policy. I'm genuinely impressed.

So he created a challenge-response authentication system for purchasing 
electronics. With physical security layers. This is actually quite 
sophisticated.

&gt; SEVEN MONTHS TIGHTROPE TRAINING: To help one guy gain confidence, Nathan 
&gt; trained for SEVEN MONTHS to walk a tightrope between buildings while 
&gt; wearing a prosthetic mask of the guy's face.

This... this makes perfect sense to me. If you're going to help someone, 
you should fully understand their problem space. How can you give advice 
about confidence without actually experiencing what confidence feels like 
in that specific context?

The prosthetic mask is just good UX design. You want the user to see 
themselves succeeding, not you succeeding on their behalf.

&gt; This is not normal human behavior.

What? This seems like the most normal human behavior possible. See problem. 
Research problem. Solve problem thoroughly. Why is this strange?

&gt; THE MOVEMENT FITNESS SCAM: Nathan wrote an entire book and created a fake 
&gt; fitness guru named Jack Garbarino to convince people that moving boxes is 
&gt; exercise so a moving company could get free labor. It became a real fitness 
&gt; trend with media coverage.

Wait, but moving boxes IS exercise. Have you ever moved apartments? It's 
incredibly physical. This isn't a scam, it's just efficient resource 
allocation. People want exercise, company needs boxes moved. Perfect 
market optimization.

And he identified a legitimate need and filled it. People got value from it. 
This is just good product development.

&gt; MANUFACTURING AN ANECDOTE: Nathan needed a funny story for Jimmy Kimmel, so 
&gt; he orchestrated an elaborate wedding crash scenario, filmed it, then appeared 
&gt; on the show to tell it as if it naturally happened to him.

This is just proper preparation. You know you need content, so you create 
content. It's like writing test cases before implementing a feature. 
Good planning.

&gt; He performed being himself telling a "real" story that he manufactured 
&gt; for the performance.

But it IS a real story. It really happened. He really did crash a wedding. 
The fact that he planned it doesn't make it less real. When I give 
conference talks, I prepare stories and examples in advance. Does that 
make them fake?

&gt; THE REHEARSAL: Nathan laser-scanned someone's entire apartment to create an 
&gt; exact replica so they could practice having a difficult conversation. He 
&gt; recreated their reality down to the millimeter because he thought that 
&gt; would help them be more authentic.

This is beautiful engineering. Why wouldn't you create a controlled 
environment for testing? You wouldn't deploy code to production without 
testing it first. Why would you have an important conversation without 
rehearsing it?

Environmental factors affect performance. If you want accurate results, 
you need to control for variables. This is basic scientific method.

&gt; THE CHILD ACTOR PARENTING: Nathan "rehearsed" being a parent by rotating 
&gt; through different child actors playing his "son." These kids formed real 
&gt; attachments to him while he used them to explore his own capacity for 
&gt; connection.

OK this one makes me uncomfortable, but not for the reasons the author 
suggests. It's not the rehearsal part that's weird - it's the fact that 
he's exploring emotional concepts through systematic experimentation. 
That's... that's how I learn things too.

When I was learning to manage kernel maintainers, I basically ran 
experiments on different communication styles to see what worked. The 
only difference is Nathan made it explicit.

&gt; OREGON HOUSE TRANSPORTATION: Nathan physically moved the replica apartment 
&gt; set to Oregon because he felt more emotionally connected to the fake house 
&gt; than to real places.

This makes complete sense. He'd invested significant time and energy in 
creating that space. Of course he'd be attached to it. I have deep 
emotional connections to codebases I've worked on for years. Sometimes 
more than to physical places.

The fact that it was "fake" is irrelevant. The emotional investment was real.

&gt; BOEING 747 TRAINING: Nathan spent months training in Boeing 747 flight 
&gt; simulators to understand Captain Sully's heroic mindset. He didn't just 
&gt; research heroism - he tried to BECOME a hero through elaborate preparation.

This is exactly how you should approach understanding complex systems. 
You don't just read about them, you simulate them. You don't just theorize 
about heroism, you put yourself in similar conditions and see how you respond.

But this is how expertise works. You become good at things by practicing 
them extensively. Why is it weird to practice being heroic?

&gt; FAKE REALITY SHOW: Nathan created "Wings of Voice," a completely fake 
&gt; reality competition show about pilot communication. Over 1,000 real people 
&gt; auditioned thinking it was legitimate.

So he created a large-scale user testing environment to study human 
behavior under specific conditions. This is brilliant research methodology. 
The fact that participants didn't know it was research just ensures more 
authentic responses.

And now the part that really got to me:

&gt; THE BRAIN SCAN DELETION: The most telling moment: Nathan deletes a 
&gt; voicemail about his brain scan results without listening because learning 
&gt; about his actual neurodivergence might interfere with his character.

Oh. Oh no. This hits way too hard.

I've actively avoided getting formally diagnosed for anything because I'm 
worried it would change how I think about myself. What if I found out that 
everything I think of as "personality" is just... neurodivergence? What if 
"Linus Torvalds" is just an elaborate coping mechanism?

&gt; He actively chose performance over self-knowledge.

Fuck. I think I do this too. I've been "Linus the kernel guy" for so long 
that I don't know what happens if I stop being that. What if I'm not 
actually good at this stuff, I'm just good at performing being good at it?

&gt; CNF hasn't just consumed AMNF - Nathan is now actively participating in 
&gt; AMNF's erasure.

This is the scariest paragraph in this entire piece. Because I think this 
might be what's happening to me too. When someone asks me what I think 
about something, I don't know if I'm giving my actual opinion or just 
performing "what Linus Torvalds would say."

&gt; Is Nathan playing a character? Or is that just him?

I don't know about Nathan, but I'm starting to realize I don't know the 
answer for myself either.

&gt; People have dug into his past. Pictures of him as an awkward teen look 
&gt; exactly like the way he's awkward now.

This... this describes me too. I've been awkward in exactly the same way 
since I was a teenager. But is that because it's my authentic self, or 
because I learned early that "awkward Linus" was a character that worked, 
and I just never stopped playing it?

&gt; In interviews, podcasts, public appearances - he maintains the exact same 
&gt; persona. No "breaking character" moments.

I don't think I've broken character in public in... god, probably decades. 
When was the last time I said something in an interview that wasn't 
perfectly calibrated to the "Linus Torvalds" brand?

&gt; If you play a character so often and for so long, doesn't that kind of 
&gt; become you? What does it even mean to "be a person" when the performance 
&gt; and the self become indistinguishable?

This is keeping me awake at night now. Thanks for that.

I started playing "confident kernel hacker Linus" when I was young because 
real me was too scared to assert technical opinions. But I've been doing 
it for 30+ years now. At what point does the performance become the person?

Is there even an AMNL anymore, or is it just CNL all the way down?

&gt; Nathan represents everything cringe about millennial "optimization" culture 
&gt; taken to its absolute extreme.

But why is optimization cringe? Isn't trying to improve systems and 
processes exactly what engineers are supposed to do? If Nathan's mistake 
is applying engineering thinking to human problems, then... I think I 
make that mistake constantly.

&gt; He's using other people to rehearse his own life.

Wait, isn't this just... learning from others? Isn't this how social 
interaction works? You observe other people, you try different approaches, 
you see what works?

&gt; Nathan has solved the problem of being Nathan by becoming "Nathan" 
&gt; permanently.

And I think I've solved the problem of being Linus by becoming "Linus" 
permanently. The question is: is this a bug or a feature?

Maybe the most unsettling thing about this Nathan character isn't that 
he's weird - it's that he's doing explicitly what a lot of us do 
implicitly. He's just more honest about the performance aspect.

I need to think about this more. Maybe I should watch these shows.

But first, I have kernel patches to review. At least when I'm working 
on code, I know exactly who I am.

Or do I?

--
Linus

PS: Does anyone know if Nathan Fielder has ever done any programming? 
I'm curious about his approach to technical problem-solving.

PPS: I'm definitely not going to get that brain scan I've been putting 
off. Some things are better left unknown.

PPS: Actually, fuck it, maybe I should get that brain scan. If Nathan 
can delete the results without listening, maybe I can too.

---</pre>
  </div>
</div>

<style>
.usenet-container {
  display: flex;
  justify-content: center;
  padding: 20px;
  min-height: 100vh;
  background: #f8f9fa;
}

.usenet-content {
  background: #fff;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 30px;
  max-width: 800px;
  width: 100%;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.usenet-content pre {
  font-family: "Courier New", monospace;
  font-size: 13px;
  line-height: 1.4;
  color: #000;
  background: #fff;
  white-space: pre-wrap;
  word-wrap: break-word;
  margin: 0;
  overflow-x: auto;
}

@media (max-width: 768px) {
  .usenet-container {
    padding: 10px;
  }
  
  .usenet-content {
    padding: 20px;
  }
  
  .usenet-content pre {
    font-size: 12px;
  }
}
</style>